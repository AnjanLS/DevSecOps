Session-07
==========

-> create a instance for backendend-server in aws with security and t3.micro services.
-> connect to server with ssh on putty or other host machines with credentials(ec2-user, DevOps321)
-> switch to root user, sudo su -
-> disable the older or unstabled version of nodejs, dnf module disable nodejs -y
-> enable the nodejs version-20, dnf module enable nodejs:20 -y
-> after enabling the required version then install the nodejs, dnf install nodejs -y
-> create a new user, useradd expense
-> and also create new directory in /(root) path, mkdir /app
-> and then download the application code in /tmp directory, curl -o /tmp/backend.zip https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
-> then unzip the the downloaded code in created directory /app, unzip /tmp/backend.zip
-> after unziping the package it also includes dependencies .json file, package.json
-> within the same directory /app install the dependencies, npm install
-> systemctl service? if u want ur applications to run as a service, create a file with extension .service in /etc/systemd/system
-> we need to setup a new service in systemd/system so systemctl can manage this service, vim /etc/systemd/system/backend.service
-> and then paste the content in backend.service file, 
[Unit]
Description = Backend Service

[Service]
User=expense
Environment=DB_HOST="<MYSQL-SERVER-PRIVATE-IPADDRESS>"
ExecStart=/bin/node /app/index.js
SyslogIdentifier=backend

[Install]
WantedBy=multi-user.target

-> cmd/private ip - 192.168.218.222 - 
-> browser/public ip - 152.58.195.13 - 
-> there is total 4,294,967,296 IPv4 addresses, or 2^32 in the world
-> private IP address is generated by a router or internet service provider (ISP) to identify devices on a local area network (LAN)
-> the ip-addresses which are in the same network will connect free, standard and secure like instances are in N.Varginia location
-> when we have done changes reload the systemctl, systemctl daemon-reload
-> after reload start and enable the backend.service, systemctl start backend, systemctl enable backend
-> and then chcek the status of the backend, systemctl status backend
-> if it's failed we need to create a schema related to application, application will store the data in database so we need to create a schema in 
database
-> the schema file includes .sql file which includes basic commands developed by developers like
CREATE DATABASE IF NOT EXISTS transactions;
USE transactions;

CREATE TABLE IF NOT EXISTS transactions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    amount INT,
    description VARCHAR(255)
);

CREATE USER IF NOT EXISTS 'expense'@'%' IDENTIFIED BY 'ExpenseApp@1';
GRANT ALL ON transactions.* TO 'expense'@'%';
FLUSH PRIVILEGES;

-> we need to install sql, dnf install mysql -y
-> we need to load the schema .sql file will connect to server ip and run the file, 
mysql -h <MYSQL_SERVER_PRIVATE_IP-ADDRESS> -uroot -pExpenseApp@1 < /app/schema/backend.sql
-> and then we need to restart the service, systemctl restart backend
-> then we can interact with the sql command, mysql -h <DATABASE-PRIVATE-IPADDRESS> -u root -pExpenseApp@1
-> we can confirm the mysql running port usually backend app will run on port 8080, netstat -lntp
-> then backend and database will connect each other 


create frontend-server - frontend-server
choose AMI(community group-RHEL9) - devops-practice
Instance type - t3.micro
key pair - no need
security group - allow-all -> launch instance
connect from git-bash - ssh ec2-user@<IP-address> -> (password)DevOps321

-> Nginx - it is a popular web-server and reverse proxy server
-> we do have 2 types of proxy, forward proxy and reverse proxy

vpn forward proxy
-----------------
-> vpn is used to access the data which is permitted in their region, when we are using vpn in our machine server is not aware that 
client is using vpn, client is aware of vpn.
-> this is used to traffic restrict, traffic monitoring, geolocation hiding, anonymous client, access private network/files

vpn reverse proxy
-----------------
-> when we are accessing any public domain like facebook it have reverse proxy/web server which forward the client requests to fb application. 
client is not aware of proxy but server is aware of proxy.
-> backend applications are behind reverse proxy servers for security, queing and cache servers

write a blogs for 
-----------------
public IP vs private IP
Reverse proxy vs forward proxy

-> access to root user, sudo su -
-> install reverse proxy server, dnf install nginx -y
-> we need start and enable the nginx service, systemctl start nginx, systemctl enable nginx
-> and the check the status of nginx, systemctl status nginx
-> to know the runningprocesses,  ps -ef | grep nginx
-> to know the nginx port frontend app will mostly use port 80, netstat -lntp
-> nginx home directory: /etc/nginx
-> html directory: /usr/share/nginx/html
-> nginx configuration: /etc/nginx/nginx.conf
-> we have total 0-65,535 = 65,536 ports, each service will allocated with the port number
-> we need to remove the default content that web server is serving, rm -rf /usr/share/nginx/html/*
-> install the frontend package, curl -o /tmp/frontend.zip https://expense-builds.s3.us-east-1.amazonaws.com/expense-frontend-v2.zip
-> extract the front-end package in this path, cd /usr/share/nginx/html, unzip /tmp/frontend.zip
-> Try to access the nginx service once more over the browser and ensure you get expense content and also we need to connect the backend and frontend 
to store in database
-> Create Nginx Reverse Proxy Configuration, vim /etc/nginx/default.d/expense.conf

proxy_http_version 1.1;

location /api/ { proxy_pass http://{BACKEND_PRIVATE_IP-ADDRESS}:8080/; }

location /health {
  stub_status on;
  access_log off;
}

-> Ensure you replace the localhost with the actual ip address of backend component server. Word localhost is just used to avoid the failures on the 
Nginx Server.
-> Restart Nginx Service to load the changes of the configuration, systemctl restart nginx
-> when we add anything from frontend the data will interact with the backend and the backend will connected with the database and store it in.
-> the default ssh port number is 22.