- name: disable current nodejs
  ansible.builtin.command: dnf module disable nodejs -y

- name: enable nodejs 20
  command: dnf module enable nodejs:20 -y

- name: Install nodejs
  package:
    name: "{{ item }}"
    state: present
  loop:
  - nodejs
  - mysql

- name: create user expense
  ansible.builtin.user:
    name: expense

# - name: create app directory
#   ansible.builtin.file:
#     path: /app
#     state: directory

# - name: download application code in specified path
#   ansible.builtin.get_url:
#     url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
#     dest: /tmp/backend.zip

# - name: unzip the downloaded code
#   ansible.builtin.unarchive:
#     src: /tmp/backend.zip
#     dest: /app
#     remote_src: yes   #If file is already in the remote machine 

- name: include from common roles
  # tags:
  # - deployment
  include_role:
    name: common
    tasks_from: main

- name: Install dependencies
  tags:
  - deployment
  community.general.npm:  #Installing nodejs dependencies
    path: /app

- name: copy backend service file   
  ansible.builtin.template:     #It'll search in template folder instead of files folder
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service

- name: Install python libraries
  ansible.builtin.pip:
    name: "{{ item }}"
    executable: pip3.9
  loop:
  - PyMySQL
  - cryptography

- name: import mysql data
  community.mysql.mysql_db: #community module
    state: import
    name: all
    login_user: "{{ MYSQL_USER }}"
    login_password: "{{ MYSQL_PASSWORD }}"
    login_host: database.anjansriram.shop
    target: /app/schema/backend.sql

- name: daemon reload and restart service
  tags:
  - deployment
  ansible.builtin.systemd_service:
    enabled: true
    state: restarted
    daemon_reload: true
    name: backend


