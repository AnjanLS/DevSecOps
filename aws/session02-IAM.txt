AWS-IAM (amazon web service-Identity and access management)
-----------------------------------------------------------

1. what is IAM?
-> In AWS, an IAM role is a security credential that you create and assign permissions to, allowing trusted entities, such as applications 
   or users, to access AWS resources.
   eg: If the organisation don't have Authentication and Authorization then all user have root access, then user will knowing/unknowning 
   delete the info from the server/server. if they don't have a backup it will be a false alaram to solve this issue aws created a service 
   IAM (Identity and access management).

2. what is Authentication and Authorization?
-> Authentication - authentication verifies the identity of a user or service
   Authorization - authorization determines what they are allowed to do or access within a system
   eg: bank which has service desk, employee desk and lockers which have Authentication and Authorization for specific area to the user.

-> Devops engineer holds a root access, if a employee/user want to access a specific service then raise a ticket and then a engineer will
   create a user and give specific permissions like read/write acccording to the request to the services in IAM under policies. they can
   perform the action according to the pemission.
   
3. concepts of IAM?
-> users, policies, groups and roles.
users - will create a user for authentication on aws
policies - while user creation we attach some policies to access the services, if they don't they can't access to any services in aws 
		   (authorizaton/permission).
groups - group is needed because employees will left/join companies frequently everytime we have to create user and attach policies it's
		 reduce efficiency and improve manual activity to solve this problem create groups.
roles - according to the employee roles we create a seperate groups in aws IAM, then we can add user to the belonging group according to
		his jira request and it reduce the efficiency.
		
4. explain roles in briefly?
-> when a developer working on a application which is on-premises in private cloud, cretaed a database service in aws. when a customer 
   tries to access the application which is in private cloud we need to get the info or customere from the aws db service. In this case 
   we can't create a user for the application because application is not a user it's just accessing data from the aws in such cases 
   create a role and tell to application developer whenever trying to acess aws just use the role and acess aws. the role consist username
   and passwd for temporarily. roles are similar to users but for temporarily use and also we can use roles to make communicate between 
   2 different aws account.
                 - >database service aws-
                 |                      |
                 |                      v
   developer -> private cloud -> customer  

5. steps to create user in IAM.
-> IAM -> select users -> create user -> username(test-user01) -> click on ckeckbox(provide user access to the aws management console) ->
   select the user type(i want to create an IAM user) -> select autogenerated passwd -> checkbox the users must create a new password at next sign-in
   -> permission option(add user to group) -> create user. -> download .csv file and share it to the user.
   login with a provided credentials and reset the passwd. It's just a autorization. for authentication we need to request the devops 
   engineer to seek permission for specific service.

-> after successfully created user by devops engineer, they will share the below details to us.
User name,Password,Console sign-in URL
test-user01,462804228885, <password>
test-user02,462804228885, <password>
-> we need to reset the password by using the above link.
-> we can access only for allowed policies and if we need to acess any ohter policies we need to get permissionfrom devops engineer.
-> and also if a multiple users/employee belonging to the same group example testing, then we can create a group with the both users and
   we can assign the policies to them.
-> s3 bucket names are global. we need to get permit to full-access for s3 bucket then only we can able to create, delete, edit etc.
-> Instead of assigning policies to multiple users as a root and we can create a group and assign policies for group is a best practices.
-> If the users need require additional scope they will request to devops engineer, then we need attach the requested policies to them.